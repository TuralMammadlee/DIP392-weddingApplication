{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\n\n// Create an axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true\n});\nclass AuthService {\n  login(username, password) {\n    return axiosInstance.post('signin', {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, firstName, lastName, phoneNumber, roles) {\n    return axiosInstance.post('signup', {\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      roles\n    });\n  }\n  getCurrentUser() {\n    try {\n      const user = localStorage.getItem('user');\n      return user ? JSON.parse(user) : null;\n    } catch (error) {\n      this.logout();\n      return null;\n    }\n  }\n  isUserLoggedIn() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  hasRole(requiredRoles) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    return requiredRoles.some(role => user.roles.includes(role));\n  }\n  updateProfile(firstName, lastName, phoneNumber, currentPassword, newPassword) {\n    return axiosInstance.put('profile', {\n      firstName,\n      lastName,\n      phoneNumber,\n      password: newPassword,\n      currentPassword\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n}\n\n// Add a request interceptor to include the auth token\naxiosInstance.interceptors.request.use(config => {\n  const token = AuthService.prototype.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle errors\naxiosInstance.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('Response Error:', error.response.data);\n    return Promise.reject(error.response.data);\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('Request Error:', error.request);\n    return Promise.reject({\n      message: 'No response from server. Please try again.'\n    });\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('Error:', error.message);\n    return Promise.reject({\n      message: 'An error occurred. Please try again.'\n    });\n  }\n});\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","headers","withCredentials","AuthService","login","username","password","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","email","firstName","lastName","phoneNumber","roles","getCurrentUser","user","getItem","parse","error","isUserLoggedIn","getToken","hasRole","requiredRoles","some","role","includes","updateProfile","currentPassword","newPassword","put","interceptors","request","use","config","token","prototype","Authorization","Promise","reject","console","message"],"sources":["c:/Users/user/Desktop/applied system software/wedding-manager-frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api/auth/';\r\n\r\n// Create an axios instance with default config\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axiosInstance\r\n      .post('signin', { username, password })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem('user', JSON.stringify(response.data));\r\n        }\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  register(username, email, password, firstName, lastName, phoneNumber, roles) {\r\n    return axiosInstance.post('signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      roles\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    try {\r\n      const user = localStorage.getItem('user');\r\n      return user ? JSON.parse(user) : null;\r\n    } catch (error) {\r\n      this.logout();\r\n      return null;\r\n    }\r\n  }\r\n\r\n  isUserLoggedIn() {\r\n    const user = this.getCurrentUser();\r\n    return !!user && !!user.accessToken;\r\n  }\r\n\r\n  getToken() {\r\n    const user = this.getCurrentUser();\r\n    return user?.accessToken;\r\n  }\r\n\r\n  hasRole(requiredRoles) {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n    \r\n    return requiredRoles.some(role => user.roles.includes(role));\r\n  }\r\n\r\n  updateProfile(firstName, lastName, phoneNumber, currentPassword, newPassword) {\r\n    return axiosInstance.put('profile', {\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      password: newPassword,\r\n      currentPassword\r\n    })\r\n    .then(response => {\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    });\r\n  }\r\n}\r\n\r\n// Add a request interceptor to include the auth token\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = AuthService.prototype.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle errors\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.error('Response Error:', error.response.data);\r\n      return Promise.reject(error.response.data);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.error('Request Error:', error.request);\r\n      return Promise.reject({ message: 'No response from server. Please try again.' });\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.error('Error:', error.message);\r\n      return Promise.reject({ message: 'An error occurred. Please try again.' });\r\n    }\r\n  }\r\n);\r\n\r\nexport default new AuthService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}