{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\n\n// Add request interceptor to include token in all requests\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user && user.accessToken) {\n    config.headers.Authorization = `Bearer ${user.accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nclass AuthService {\n  login(username, password) {\n    return axios.post(API_URL + 'signin', {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, firstName, lastName, phoneNumber, roles) {\n    return axios.post(API_URL + 'signup', {\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      roles\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  isUserLoggedIn() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  hasRole(requiredRoles) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    return requiredRoles.some(role => user.roles.includes(role));\n  }\n  updateProfile(firstName, lastName, phoneNumber, currentPassword, newPassword) {\n    return axios.put(API_URL + 'profile', {\n      firstName,\n      lastName,\n      phoneNumber,\n      password: newPassword,\n      currentPassword\n    }, {\n      headers: {\n        'Authorization': `Bearer ${this.getToken()}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","accessToken","headers","Authorization","error","Promise","reject","AuthService","login","username","password","post","then","response","data","setItem","stringify","logout","removeItem","register","email","firstName","lastName","phoneNumber","roles","getCurrentUser","isUserLoggedIn","getToken","hasRole","requiredRoles","some","role","includes","updateProfile","currentPassword","newPassword","put"],"sources":["c:/Users/user/Desktop/applied system software/wedding-manager-frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api/auth/';\r\n\r\n// Add request interceptor to include token in all requests\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.accessToken) {\r\n      config.headers.Authorization = `Bearer ${user.accessToken}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + 'signin', {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem('user', JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  register(username, email, password, firstName, lastName, phoneNumber, roles) {\r\n    return axios.post(API_URL + 'signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      firstName,\r\n      lastName,\r\n      phoneNumber,\r\n      roles\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));\r\n  }\r\n\r\n  isUserLoggedIn() {\r\n    const user = this.getCurrentUser();\r\n    return !!user && !!user.accessToken;\r\n  }\r\n\r\n  getToken() {\r\n    const user = this.getCurrentUser();\r\n    return user?.accessToken;\r\n  }\r\n\r\n  hasRole(requiredRoles) {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n    \r\n    return requiredRoles.some(role => user.roles.includes(role));\r\n  }\r\n\r\n  updateProfile(firstName, lastName, phoneNumber, currentPassword, newPassword) {\r\n    return axios\r\n      .put(API_URL + 'profile', {\r\n        firstName,\r\n        lastName,\r\n        phoneNumber,\r\n        password: newPassword,\r\n        currentPassword\r\n      }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.getToken()}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem('user', JSON.stringify(response.data));\r\n        }\r\n        return response.data;\r\n      });\r\n  }\r\n}\r\n\r\nexport default new AuthService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}