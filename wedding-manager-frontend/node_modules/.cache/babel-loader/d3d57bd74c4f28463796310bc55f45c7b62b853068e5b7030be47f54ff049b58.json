{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\nclass AuthService {\n  login(username, password) {\n    return axios.post(API_URL + 'signin', {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, firstName, lastName, phoneNumber, roles) {\n    return axios.post(API_URL + 'signup', {\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      roles\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  isUserLoggedIn() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  hasRole(requiredRoles) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    return requiredRoles.some(role => user.roles.includes(role));\n  }\n  updateProfile(firstName, lastName, phoneNumber, currentPassword, newPassword) {\n    return axios.put(API_URL + 'profile', {\n      firstName,\n      lastName,\n      phoneNumber,\n      password: newPassword,\n      currentPassword\n    }, {\n      headers: {\n        'Authorization': `Bearer ${this.getToken()}`\n      }\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","email","firstName","lastName","phoneNumber","roles","getCurrentUser","parse","getItem","isUserLoggedIn","user","getToken","hasRole","requiredRoles","some","role","includes","updateProfile","currentPassword","newPassword","put","headers"],"sources":["c:/Users/user/Desktop/applied system software/wedding-manager-frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/auth/';\n\nclass AuthService {\n  login(username, password) {\n    return axios\n      .post(API_URL + 'signin', {\n        username,\n        password\n      })\n      .then(response => {\n        if (response.data.accessToken) {\n          localStorage.setItem('user', JSON.stringify(response.data));\n        }\n\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  register(username, email, password, firstName, lastName, phoneNumber, roles) {\n    return axios.post(API_URL + 'signup', {\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      roles\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  isUserLoggedIn() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  getToken() {\n    const user = this.getCurrentUser();\n    return user?.accessToken;\n  }\n\n  hasRole(requiredRoles) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    \n    return requiredRoles.some(role => user.roles.includes(role));\n  }\n\n  updateProfile(firstName, lastName, phoneNumber, currentPassword, newPassword) {\n    return axios\n      .put(API_URL + 'profile', {\n        firstName,\n        lastName,\n        phoneNumber,\n        password: newPassword,\n        currentPassword\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.getToken()}`\n        }\n      })\n      .then(response => {\n        if (response.data.accessToken) {\n          localStorage.setItem('user', JSON.stringify(response.data));\n        }\n        return response.data;\n      });\n  }\n}\n\nexport default new AuthService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACxB,OAAOL,KAAK,CACTM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;MACxBG,QAAQ;MACRC;IACF,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7BC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7D;MAEA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;EAEAM,MAAMA,CAAA,EAAG;IACPJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC;EAEAC,QAAQA,CAACb,QAAQ,EAAEc,KAAK,EAAEb,QAAQ,EAAEc,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,KAAK,EAAE;IAC3E,OAAOtB,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;MACpCG,QAAQ;MACRc,KAAK;MACLb,QAAQ;MACRc,SAAS;MACTC,QAAQ;MACRC,WAAW;MACXC;IACF,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAOV,IAAI,CAACW,KAAK,CAACb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;EAEAC,cAAcA,CAAA,EAAG;IACf,MAAMC,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAI,CAAC,CAACA,IAAI,CAACjB,WAAW;EACrC;EAEAkB,QAAQA,CAAA,EAAG;IACT,MAAMD,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAOI,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEjB,WAAW;EAC1B;EAEAmB,OAAOA,CAACC,aAAa,EAAE;IACrB,MAAMH,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,IAAI,CAACI,IAAI,EAAE,OAAO,KAAK;IAEvB,OAAOG,aAAa,CAACC,IAAI,CAACC,IAAI,IAAIL,IAAI,CAACL,KAAK,CAACW,QAAQ,CAACD,IAAI,CAAC,CAAC;EAC9D;EAEAE,aAAaA,CAACf,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEc,eAAe,EAAEC,WAAW,EAAE;IAC5E,OAAOpC,KAAK,CACTqC,GAAG,CAACpC,OAAO,GAAG,SAAS,EAAE;MACxBkB,SAAS;MACTC,QAAQ;MACRC,WAAW;MACXhB,QAAQ,EAAE+B,WAAW;MACrBD;IACF,CAAC,EAAE;MACDG,OAAO,EAAE;QACP,eAAe,EAAE,UAAU,IAAI,CAACV,QAAQ,CAAC,CAAC;MAC5C;IACF,CAAC,CAAC,CACDrB,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7BC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7D;MACA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;AACF;AAEA,eAAe,IAAIP,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}